
def label = "mypod-${UUID.randomUUID().toString()}"
def dockerRegistry = "100.71.71.71:5000"
def Creds = "git_cred"

String deploy_db = """
---
apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: production
  name: db-service
spec:
  selector:
    matchLabels:
      app: db-service
  template:
    metadata:
      labels:
        app: db-service
    spec:
      initContainers:
      - image: 100.71.71.71:5000/init-container:${params.imageTagDB_}
        name: init-container-postgres
        env:
        - name: PGDATABASE
          valueFrom:
            secretKeyRef:
              name: db-secret
              key: dbname
        - name: PGUSER
          valueFrom:
            secretKeyRef:
              name: db-secret
              key: username
        - name: PGPASSWORD
          valueFrom:
            secretKeyRef:
              name: db-secret
              key: password
        command: ['sh', '-c', '/bin/bash /tmp/check_dump.sh']
      containers:
      - image: 100.71.71.71:5000/db-service:${params.imageTagDB_}
        name: db-service
        ports:
        - containerPort: 5002
        env:
        - name: POSTGRES_HOST
          value: srmsystemdb
        - name: POSTGRES_PORT
          value: '5432'
        - name: PGDATABASE
          valueFrom:
            secretKeyRef:
              name: db-secret
              key: dbname
        - name: PGUSER
          valueFrom:
            secretKeyRef:
              name: db-secret
              key: username
        - name: PGPASSWORD
          valueFrom:
            secretKeyRef:
              name: db-secret
              key: password 
---
kind: Service
apiVersion: v1
metadata:
  namespace: production
  name: db-service
spec:
  selector:
    app: db-service
  ports:
  - protocol: TCP
    port: 5002
    targetPort: 5002
---
"""

String deploy_ui = """
---
kind: Service
apiVersion: v1
metadata:
  namespace: production
  name: ui-service
  labels:
    app: ui
spec:
  selector:
    app: ui
  ports:
  - protocol: TCP
    port: 5000
    targetPort: 5000

---
apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: production
  name: ui-deployment
spec:
  selector:
    matchLabels:
      app: ui
  replicas: 1
  template:
    metadata:
      labels:
        app: ui
    spec:
      containers:
      - name: ui
        image: 100.71.71.71:5000/ui-service:${params.imageTagUI_}
        ports:
        - containerPort: 5000
        env:
        - name: POST_SERVICE_URL
          valueFrom:
            configMapKeyRef:
              name: services-address
              key: POST_SERVICE_URL
        - name: VIEW_SERVICE_URL
          valueFrom:
            configMapKeyRef:
              name: services-address
              key: VIEW_SERVICE_URL
"""

String deploy_get = """
---
kind: Service
apiVersion: v1
metadata:
  namespace: production
  name: get-service
  labels:
    app: get
spec:
  selector:
    app: get
  ports:
  - protocol: TCP
    port: 5003
    targetPort: 5003

---
apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: production
  name: get-deployment
spec:
  selector:
    matchLabels:
      app: get
  replicas: 1
  template:
    metadata:
      labels:
        app: get
    spec:
      containers:
      - name: get
        image: 100.71.71.71:5000/get-service:${params.imageTagGET_}
        ports:
        - containerPort: 5003
        env:
        - name: URL_DB
          valueFrom:
            configMapKeyRef:
              name: services-address
              key: URL_DB
"""

properties([
    parameters([
        stringParam(
            defaultValue: '***', 
            description: '', 
            name: 'service')
    ])
])

podTemplate(label: label, containers: [
  containerTemplate(name: 'python-alpine', image: 'ghostgoose33/python-alp:v3', command: 'cat', ttyEnabled: true),
  containerTemplate(name: 'kubectl', image: 'lachlanevenson/k8s-kubectl:v1.8.8', command: 'cat', ttyEnabled: true)
],
volumes: [
  hostPathVolume(mountPath: '/var/run/docker.sock', hostPath: '/var/run/docker.sock')
], serviceAccount: "jenkins") 
{


node(label)
{
    try{
        stage("Deploy to Kubernetes"){
	    build(job: 'GitHub/Kubik-DB/master', parameters: [[$class: 'StringParameterValue', name:"service", value: "***"]], wait: true)
            if(params.service == "db"){
		container ("kubectl"){
		    sh """echo "$deploy_db" | kubectl apply -f -"""
			
	    }
	    }
            if(params.service == "get"){
		container ("kubectl"){
		    sh """echo "$deploy_get" | kubectl apply -f -"""
			
	    }
	    }
	    if(params.service == "ui"){
		container ("kubectl"){
		    sh """echo "$deploy_ui" | kubectl apply -f -"""
			
	    }
	    }
            
            if(params.service == "post"){
		container ("kubectl"){
		    sh """echo "$deploy_post" | kubectl apply -f -"""
			
	    }
	    }    
        }

	sleep 30

        stage ("Prod Tests"){
            container('python-alpine'){
                sh 'echo "Here is prod test"'
	            sh "python3 /e2e-test-prod.py"
          }
        }
        
    }
    catch(err){
        currentBuild.result = 'Failure'
    }
}
}
