
def label = "mypod-${UUID.randomUUID().toString()}"
def dockerRegistry = "100.71.71.71:5000"
def Creds = "git_cred"

properties([
    parameters([
        stringParam(
            defaultValue: "***", 
            description: '', 
            name: 'imageTagGET'),
	stringParam(
            defaultValue: "***", 
            description: '', 
            name: 'imageTagUI'),
	stringParam(
            defaultValue: "***", 
            description: '', 
            name: 'imageTagDB'),
        stringParam(
            defaultValue: '***', 
            description: '', 
            name: 'namespace')
    ])
])

podTemplate(label: label, containers: [
  containerTemplate(name: 'python-alpine', image: 'ghostgoose33/python-alp:v1', command: 'cat', ttyEnabled: true),
  containerTemplate(name: 'kubectl', image: 'lachlanevenson/k8s-kubectl:v1.8.8', command: 'cat', ttyEnabled: true)
],
volumes: [
  hostPathVolume(mountPath: '/var/run/docker.sock', hostPath: '/var/run/docker.sock')
], serviceAccount: "jenkins") 
{


node(label)
{
    try{
        stage("Pre-Test"){
            dir('db'){
            git(branch: "test", url: 'https://github.com/Kv-045DevOps/SRM-DB.git', credentialsId: "${Creds}")
            imageTagDB = sh (script: "git rev-parse --short HEAD", returnStdout: true)
            pathTocodedb=pwd()
            }
            dir('ui'){
            git(branch: "test", url: 'https://github.com/Kv-045DevOps/SRM-UI.git', credentialsId: "${Creds}")
            imageTagUI = sh (script: "git rev-parse --short HEAD", returnStdout: true)
            pathTocodeui=pwd()
            }
            dir('post'){
            git(branch: "test", url: 'https://github.com/Kv-045DevOps/SRM-POST.git', credentialsId: "${Creds}")
            imageTagPOST = sh (script: "git rev-parse --short HEAD", returnStdout: true)
            pathTocodepost=pwd()
            }
            dir('ini'){
            git(branch: "master", url: 'https://github.com/Kv-045DevOps/Kubik-DB.git', credentialsId: "${Creds}")
            imageTagINI = (sh (script: "git rev-parse --short HEAD", returnStdout: true))
            pathTocodeini=pwd()
            }
            dir('get'){
            git(branch: "test", url: 'https://github.com/Kv-045DevOps/SRM-GET.git', credentialsId: "${Creds}")
            imageTagGET = (sh (script: "git rev-parse --short HEAD", returnStdout: true))
            pathTocodeget = pwd()
            }
        
        }
        stage("Deploy to Kubernetes"){
            if(params.imageTagDB != "***"){
		container("python-alpine"){
                  sh "python3 ${pathTocodedb}/sed_python.py ${pathTocodedb}/template.yaml ${dockerRegistry}/db-service ${params.imageTagDB}"
                  sh "python3 ${pathTocodedb}/sed_python.py ${pathTocodedb}/template.yaml ${dockerRegistry}/init-container ${params.imageTagDB}"    
	    }
		container ("kubectl"){
		    sh "kubectl apply -f ${pathTocodeini}/template.yaml"
			sh "kubectl apply -f ${pathTocodedb}/template.yaml"
			
	    }
	    }
            if(params.imageTagGET != "***"){
		container("python-alpine"){
			sh "python3 ${pathTocodeget}/sed_python.py ${pathTocodeget}/template.yaml ${dockerRegistry}/get-service ${params.imageTagGET}"    
	    }
		container ("kubectl"){
			sh "kubectl apply -f ${pathTocodeget}/template.yaml"
	    }
	    }
	    if(params.imageTagUI != "***"){
		container("python-alpine"){
                  sh "python3 ${pathTocodeui}/sed_python.py ${pathTocodeui}/template.yaml ${dockerRegistry}/ui-service ${params.imageTagUI}"    
	    }
		container ("kubectl"){
			sh "kubectl apply -f ${pathTocodeui}/template.yaml"
	    }
	    }
            
            if(params.imageTagPOST != "***"){
		container("python-alpine"){
                //sh "python3 ${pathTocodepost}/sed_python.py ${pathTocodepost}/template.yaml ${dockerRegistry}/post-service ${imageTagPOST}"
	    }
		container ("kubectl"){
			//sh "kubectl apply -f ${pathTocodepost}/template.yaml"
	    }
            }    
        }

	sleep 30

        stage ("Prod Tests"){
            container('python-alpine'){
                sh 'echo "Here is prod test"'
	            sh "python3 ${pathTocodeget}/e2e-test-prod.py"
          }
        }
        
    }
    catch(err){
        currentBuild.result = 'Failure'
    }
}
}
